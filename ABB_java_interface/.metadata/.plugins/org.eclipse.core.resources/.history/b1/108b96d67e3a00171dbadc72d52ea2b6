package br.imd;

public class Tree {
	
	private No root;
	private Tree leftTree;
	private Tree rightTree;
	
	public Tree(){
		// construtor vazio
	}
	
	public Tree getRightTree(){
		return rightTree;
	}
	
	public void setRightTree(Tree rightTree){
		this.rightTree = rightTree;
	}
	
	public Tree getLeftTree(){
		return leftTree;
	}
	
	public void setLeftTree(Tree leftTree){
		this.leftTree = leftTree;
	}
	
	 public No getRoot() {
	        return root;
	 }

	public void setRoot(No root) {
	        this.root = root;
	}
	
	public void insereAluno(int matricula, String nome) {
        Aluno aluno = new Aluno(matricula, nome);
        No no = new No(aluno);
        inserir(no);
    }

	private void inserir(No no) {
		if(this.root == null){
		   this.root = no;
		}
		else {
			if (no.getAluno().getMatricula() > this.root.getAluno().getMatricula()){
				if (this.rightTree == null){
					this.rightTree = new Tree();
				}
				this.rightTree.inserir(no);
			}
			else if (no.getAluno().getMatricula() < this.root.getAluno().getMatricula()){
				if (this.leftTree == null){
					this.leftTree = new Tree();
				}
				this.leftTree.inserir(no);
			}
		}
		
	}

	/**
	 * MÃ©todo Buscar
	 * @return 
	 */
	
	public No buscar(int matricula, No root){
		if(this.root == null ){
			return root;
		}
		else if(root.getAluno().getMatricula() > matricula){
			return this.buscar(matricula, root.getLeftTree());
		}
		else{
			return this.buscar(matricula, root.getRightTree());
		}
	}
	
	
	// faltando implementar percorrerInOrdem();
	
	 public void emordem(No no) {
	        if(no != null){
	        	emordem(no.esquerda);
			System.out.print(no.valor + " ");
	        	emordem(no.direita);
	        }
	    }
	
	// faltando implementar percorrerPreOrdem();
	
	 public void prefixado(No no) {
	        if(no != null){
	            System.out.print(no.valor + " ");
	            prefixado(no.esquerda);
	            prefixado(no.direita);
	        }
	    }
	
	// faltando implementar percorrerPosOrdem();
	 

	    public void posfixado(No no) {
	        if(no != null){
	        	posfixado(no.esquerda);
	        	posfixado(no.direita);
	            System.out.print(no.valor + " ");
	        }
	    }
}